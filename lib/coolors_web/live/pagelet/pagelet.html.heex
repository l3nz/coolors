<h1>I am pagelet #{@pagelet_id}</h1>

<img src={@qr_svg} />

<hr />

<div style={"background: #{@ps_bg_color}"}>
  Color goes here <p /> Color goes here <p /> Color goes here <p /> Color goes here <p />
  Color goes here <p /> Color goes here <p /> Color goes here <p /> Color goes here <p />
  Color goes here <p /> Color goes here <p /> Color goes here <p /> Color goes here <p />
  Color goes here <p /> Color goes here <p /> Color goes here <p /> Color goes here <p />
  Color goes here <p /> Color goes here <p /> Color goes here <p /> Color goes here <p />
</div>

<hr /> Invisible video here <button id="videoFallbackBtn">Try Video Fallback</button>
<button id="requestBtn">Request Wake Lock</button>
<button id="releaseBtn" disabled>Release Wake Lock</button>

<div id="videoContainer">
  <video id="keepAwakeVideo" width="50" height="50" muted loop style="opacity: 0;">
    <source
      src="data:video/mp4;base64,AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAAGW1kYXQAAAKuQW1vaGVhZAAAAz0AAAHcAAABHEVuY29kZWQgd2l0aCBsYXZjNTUuMzEuMTAx"
      type="video/mp4"
    />
  </video>
  <p style="color: #666; font-size: 14px; margin-top: 10px;">
    Invisible video playing to prevent sleep
  </p>
</div>

<script>
    let wakeLock = null;
          const statusEl = document.getElementById('status');
          const requestBtn = document.getElementById('requestBtn');
          const releaseBtn = document.getElementById('releaseBtn');
        

      const videoFallbackBtn = document.getElementById('videoFallbackBtn');
      const videoContainer = document.getElementById('videoContainer');
          
     const video = document.getElementById('keepAwakeVideo');

          // Check if Wake Lock API is supported
          if ('wakeLock' in navigator) {
              updateStatus('Wake Lock API supported', 'inactive');
          } else {
              updateStatus('Wake Lock API not supported - use fallback methods', 'unsupported');
              requestBtn.disabled = true;
          }

  // Request wake lock
          requestBtn.addEventListener('click', async () => {
              try {
                  wakeLock = await navigator.wakeLock.request('screen');
                  updateStatus('Wake Lock Active - Screen will stay on', 'active');
                  requestBtn.disabled = true;
                  releaseBtn.disabled = false;

                  // Listen for wake lock release (happens automatically when tab becomes hidden)
                  wakeLock.addEventListener('release', () => {
                      updateStatus('Wake Lock Released', 'inactive');
                      requestBtn.disabled = false;
                      releaseBtn.disabled = true;
                  });

              } catch (err) {
                  console.error('Failed to request wake lock:', err);
                  updateStatus(`Failed to request wake lock: ${err.message}`, 'inactive');
              }
          });

          // Release wake lock
          releaseBtn.addEventListener('click', () => {
              if (wakeLock) {
                  wakeLock.release();
                  wakeLock = null;
              }
          });

          function updateStatus(message, type) {
              alert(message);
              
                      }

          // Show additional info about the current environment
          console.log('User Agent:', navigator.userAgent);
          console.log('Wake Lock supported:', 'wakeLock' in navigator);

  // Video fallback for older browsers
          videoFallbackBtn.addEventListener('click', () => {
              if (videoContainer.style.display === 'none') {
                  video.play();
                  videoContainer.style.display = 'block';
                  videoFallbackBtn.textContent = 'Stop Video Fallback';
              } else {
                  video.pause();
                  videoContainer.style.display = 'none';
                  videoFallbackBtn.textContent = 'Try Video Fallback';
              }
          });
</script>
